#version 460
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable

struct GeometryNode {
  int indexOffset;
  int vertexOffset;
  int baseColorTexture;
  int metallicRoughnessTexture;
  int normalTexture;
  int occlusionTexture;
  int emissiveTexture;
  int specularGlossinessTexture;
  int diffuseTexture;
  float alphaCutoff;
  float metallicFactor;
  float roughnessFactor;
  vec4 baseColorFactor;
  vec4 emissiveFactor;
  float emissiveStrength;
  float transmissionFactor;
  float ior;
  uint alphaMode;
};

struct Vertex {
  vec3 pos;
  float pad0;
	vec3 normal;
  float pad1;
	vec2 uv;
  float pad2[2];
	vec4 color;
	vec4 joint0;
	vec4 weight0;
	vec4 tangent;
};

hitAttributeEXT vec3 attribs;

layout(binding = 3, set = 0) buffer Indices { uint i[]; } indices;
layout(binding = 4, set = 0) buffer Vertices { Vertex v[]; } vertices;
layout(binding = 5, set = 0) buffer GeometryNodes { GeometryNode nodes[]; } geometryNodes;
layout(binding = 7, set = 0) uniform sampler2D texSampler[];


void main()
{
  GeometryNode geometryNode = geometryNodes.nodes[gl_GeometryIndexEXT];
  const uint triIndex = geometryNode.indexOffset + gl_PrimitiveID * 3;
  Vertex TriVertices[3];
  for (uint i = 0; i < 3; i++) {
    uint index = indices.i[triIndex + i];
    TriVertices[i] = vertices.v[index];
	}
	vec3 barycentricCoords = vec3(1.0f - attribs.x - attribs.y, attribs.x, attribs.y);
	vec2 uv = TriVertices[0].uv * barycentricCoords.x + TriVertices[1].uv * barycentricCoords.y + TriVertices[2].uv * barycentricCoords.z;
  if(geometryNode.baseColorTexture >= 0){
    if(texture(texSampler[geometryNode.baseColorTexture], uv).a < 0.999){
      ignoreIntersectionEXT;
    }
  }
}