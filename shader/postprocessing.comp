#version 460

layout( push_constant ) uniform PushConstants {
    float deltaTime;
    uint width;
    uint height;
} constants;
layout(binding = 0, set = 0) buffer ImageInfo {uint histogram[256]; float average;} imageInfo;
layout(binding = 1, set = 0, rgba8) restrict writeonly uniform image2D image;
layout(binding = 2, set = 0, rgba32f) restrict readonly uniform image2D accImage;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

const mat3 RGB_2_XYZ = mat3(
    0.4124564, 0.2126729, 0.0193339,
    0.3575761, 0.7151522, 0.1191920,
    0.1804375, 0.0721750, 0.9503041
);

const mat3 XYZ_2_RGB = mat3(
     3.2404542,-0.9692660, 0.0556434,
    -1.5371385, 1.8760108,-0.2040259,
    -0.4985314, 0.0415560, 1.0572252
);

vec3 rgb_to_xyY(vec3 rgb) {
    vec3 xyz = RGB_2_XYZ * rgb;
    float Y = xyz.y;
    float x = xyz.x / (xyz.x + xyz.y + xyz.z);
    float y = xyz.y / (xyz.x + xyz.y + xyz.z);
    return vec3(x, y, Y);
}

vec3 xyY_to_rgb(vec3 xyY) {
    float Y = xyY.z;
    float x = Y * xyY.x / xyY.y;
    float z = Y * (1.0 - xyY.x - xyY.y) / xyY.y;
    vec3 xyz = vec3(x, Y, z);
    return  XYZ_2_RGB * xyz;
}

float linear(float x, float whitePoint) {
    return x / whitePoint;
}

float reinhard(float x) {
    return x / (1.0 + x);
}

float reinhard2(float x, float whitePoint) {
    return (x * (1.0 + x / (whitePoint * whitePoint))) / (1.0 + x);
}

float filmic_ACES(float x) {
    // Narkowicz 2015, "ACES Filmic Tone Mapping Curve"
    const float a = 2.51;
    const float b = 0.03;
    const float c = 2.43;
    const float d = 0.59;
    const float e = 0.14;
    return (x * (a * x + b)) / (x * (c * x + d) + e);
}

float filmic_uchimura(float x) {
    // Uchimura 2017, "HDR theory and practice"
    const float P = 1.0;
    const float a = 1.0;
    const float m = 0.22;
    const float l = 0.4;
    const float c = 1.33;
    const float b = 0.0;
    float l0 = ((P - m) * l) / a;
    float L0 = m - m / a;
    float L1 = m + (1.0 - m) / a;
    float S0 = m + l0;
    float S1 = m + a * l0;
    float C2 = (a * P) / (P - S1);
    float CP = -C2 / P;

    float w0 = 1.0 - smoothstep(0.0, m, x);
    float w2 = step(m + l0, x);
    float w1 = 1.0 - w0 - w2;

    float T = m * pow(x / m, c) + b;
    float S = P - (P - S1) * exp(CP * (x - S0));
    float L = m + a * (x - m);

    return T * w0 + L * w1 + S * w2;
}

float filmic_lottes(float x) {
    // Lottes 2016, "Advanced Techniques and Optimization of HDR Color Pipelines"
    const float a = 1.6;
    const float d = 0.977;
    const float hdrMax = 8.0;
    const float midIn = 0.18;
    const float midOut = 0.267;
    const float b = (-pow(midIn, a) + pow(hdrMax, a) * midOut) / ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);
    const float c = (pow(hdrMax, a * d) * pow(midIn, a) - pow(hdrMax, a) * pow(midIn, a * d) * midOut) / ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);
    return pow(x, a) / (pow(x, a * d) * b + c);
}

void main() 
{
    vec3 rgb = imageLoad(accImage, ivec2(gl_GlobalInvocationID.xy)).xyz;
    
    float avgLum = imageInfo.average;

    vec3 xyY = rgb_to_xyY(rgb);

    float whitePoint = 2.0;

    float exposure = 1.0 / (9.6 * avgLum + 0.0001);

    float lp = xyY.z * exposure;

    xyY.z = filmic_ACES(lp);

    rgb = xyY_to_rgb(xyY);

    if (gl_GlobalInvocationID.x < constants.width && gl_GlobalInvocationID.y < constants.height) {
	    imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4(rgb, 1.0));
    }
}
