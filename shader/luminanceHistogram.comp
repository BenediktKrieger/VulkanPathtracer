#version 460
#define GROUP_SIZE 256
#define EPSILON 0.005
#define RGB_TO_LUM vec3(0.2125, 0.7154, 0.0721)
const float minLogLuminance = -10;
const float invLogLuminanceRange = 0.083333333;

layout( push_constant ) uniform PushConstants {
    float deltaTime;
    uint width;
    uint height;
} constants;
layout(binding = 0, set = 0) buffer ImageInfo {uint histogram[256]; float average;} imageInfo;
layout(binding = 1, set = 0, rgba8) restrict uniform image2D image;
layout(binding = 2, set = 0, rgba32f) restrict uniform image2D accImage;

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

shared uint histogramShared[GROUP_SIZE];

// For a given color and luminance range, return the histogram bin index
uint colorToBin(vec3 hdrColor, float minLogLum, float inverseLogLumRange) {
    float lum = dot(hdrColor, RGB_TO_LUM);
    if (lum < EPSILON) {
        return 0;
    }
    float logLum = clamp((log2(lum) - minLogLum) * inverseLogLumRange, 0.0, 1.0);
    return uint(logLum * 254.0 + 1.0);
}

void main() 
{
    // Initialize the bin for this thread to 0
    histogramShared[gl_LocalInvocationIndex] = 0;

    barrier();

    if (gl_GlobalInvocationID.x < constants.width && gl_GlobalInvocationID.y < constants.height) {
        vec3 hdrColor = imageLoad(accImage, ivec2(gl_GlobalInvocationID.xy)).xyz;
        uint binIndex = colorToBin(hdrColor, minLogLuminance, invLogLuminanceRange);
        atomicAdd(histogramShared[binIndex], 1);
    }

    barrier();

    atomicAdd(imageInfo.histogram[gl_LocalInvocationIndex], histogramShared[gl_LocalInvocationIndex]);
}