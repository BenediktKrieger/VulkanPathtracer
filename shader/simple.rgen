#version 460
#extension GL_EXT_ray_tracing : require
layout( push_constant ) uniform constants
{
	mat4 invProj;
	mat4 invView;
	mat4 model;
	uint accumulatedFrames;
} PushConstants;

struct Hit {
	vec3 color;
};

struct RayPayload {
	vec3 color;
	vec3 origin;
	vec3 dir;
    float f;
    float pdf;
	uint translucentRecursion;
	uint diffuseRecursion;
	bool continueTrace;
};

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D accImage;
layout(binding = 7, set = 0) readonly uniform Settings {
	bool accumulate;
	uint min_samples;
    bool limit_samples;
    uint max_samples;
	uint reflection_recursion;
	uint refraction_recursion;
    float ambient_multiplier;
    bool auto_exposure;
    float exposure;
} settings;

layout(location = 0) rayPayloadEXT RayPayload Payload;

float halton(uint base, uint index)
{
	float result = 0.;
	float f = 1.;
	while (index > 0)
	{
		f = f / float(base);
		result += f * float(index % base);
		index = index / base;
	}
	return result;
}

void main() 
{
	uint accFrames = PushConstants.accumulatedFrames;
	if((settings.limit_samples && accFrames < settings.max_samples) || !settings.limit_samples){
		vec4 origin = PushConstants.invView * vec4(0,0,0,1);
		float tmin = 0.0;
		float tmax = 10000.0;
		uint spp = settings.min_samples;

		vec3 sumofHitValues = vec3(0.0);

		for(uint i = 0; i < spp; i++){
			const uint haltonIndex = (accFrames - 1) * spp + i;
			const vec2 haltonValue = vec2(halton(2, haltonIndex), halton(3, haltonIndex));
			const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + haltonValue;
			const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
			const vec2 d = inUV * 2.0 - 1.0;
			const vec4 target = PushConstants.invProj * vec4(d.x, d.y, 1, 1);
			const vec4 direction = PushConstants.invView * vec4(normalize(target.xyz), 0);
			
			Payload.color = vec3(1.0);
			Payload.diffuseRecursion = 0;
			Payload.translucentRecursion = 0;
			Payload.continueTrace = true;
			Payload.origin = origin.xyz;
			Payload.dir = direction.xyz;
			Payload.f = 1.0;
			Payload.pdf = 1.0;
			
			while(Payload.continueTrace) {
				traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xFF, 0, 0, 0, Payload.origin, tmin, Payload.dir, tmax, 0);
				if(Payload.diffuseRecursion >= settings.reflection_recursion || Payload.translucentRecursion >= settings.refraction_recursion){
					Payload.color = vec3(0.0);
					Payload.continueTrace = false;
				}
			}

			if(Payload.pdf < 0.0001 || Payload.f < 0.0001 || isnan(Payload.pdf) || isnan(Payload.f) || isinf(Payload.pdf) || isinf(Payload.f)){
				sumofHitValues += vec3(0.0);
			}else{
				float sample_weight = Payload.f / Payload.pdf;
				sumofHitValues +=  Payload.color * sample_weight;
			}
		}

		vec3 newColor = sumofHitValues / spp;

		if(accFrames > 1 && settings.accumulate){
			vec4 oldColor = imageLoad(accImage, ivec2(gl_LaunchIDEXT.xy));
			if(accFrames > 1) {
				newColor = oldColor.xyz * ((accFrames - 1.0) /  accFrames) + newColor * (1.0 / accFrames);
			}
		}
		
		imageStore(accImage, ivec2(gl_LaunchIDEXT.xy), vec4(newColor, 1.0));
	}
}
